generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                       Int       @id @default(autoincrement())
  email                    String    @unique
  password                 String
  resetPasswordToken       String?
  resetPasswordTokenExpiry DateTime?

  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  Profile    Profile?
  Item       Item[]
  Rental     Rental[]
}

model Profile {
  id            Int          @id @default(autoincrement())
  name          String       @unique
  document      String       @unique
  document_type DocumentType
  image_url     String?
  user          User?        @relation(fields: [user_id], references: [id])
  user_id       Int?         @unique
  address       Address[]
  newsletter    Boolean      @default(false)
  phone_number  String
}

model Address {
  id           Int     @id @default(autoincrement())
  phone_number String
  profile      Profile @relation(fields: [profile_id], references: [id])
  profile_id   Int
  street       String
  number       Int
  zip_code     String
  district     String
  city         String
}

model Item {
  id            Int      @id @default(autoincrement())
  name          String
  description   String?
  dailyRate     Float
  minRentalDays Int
  maxRentalDays Int
  isActive      Boolean  @default(true)
  isRented      Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  userId        Int
  user          User     @relation(fields: [userId], references: [id])
  photos        Json?
  videoUrl      String?

  cep          String
  address      String
  street       String
  neighborhood String
  number       String
  Rental       Rental[]
}

model Rental {
  id            Int      @id @default(autoincrement())
  user          User     @relation(fields: [userId], references: [id])
  userId        Int
  item          Item     @relation(fields: [itemId], references: [id])
  itemId        Int
  startDate     DateTime
  endDate       DateTime
  totalPrice    Float
  paymentStatus String   @default("pending") // Ex: "pending", "paid", "failed"
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

enum DocumentType {
  CPF
  CNPJ
}
